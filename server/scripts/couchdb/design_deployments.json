{
    "_id": "_design/deployments",
    "language": "javascript",
    "views": {
        "allDeployments": {
            "map": "function(doc) {\n  if (doc.resource === 'Deployment') {\n    emit(doc._id,doc);\n  }\n}"
        },
        "open": {
            "map": "function(doc) {\n  if (doc.resource && doc.resource === 'Deployment' && !doc.endDate) {\n    // A condensed deployment for performance\n    var deployment = {\n      // Assign the ID\n      _id: doc._id,\n      \n      // Assign the revision\n      _rev: doc._rev,\n\n      // Grab the name of the deployment\n      name: doc.name,\n\n      // Grab the descripton\n      description: doc.description,\n\n      // Grab the dates\n      startDate: doc.startDate,\n      endDate: doc.endDate,\n\n      // Grab the ESP information\n      esp: doc.esp,\n\n      // Grab the location\n      latitude: doc.latitude,\n      longitude: doc.longitude,\n      depth: doc.depth,\n\n      // The last line parsed in the file\n      lastLineParsedFromLogFile: doc.lastLineParsedFromLogFile,\n\n      // Add the list of ancillary data\n      ancillaryData: doc.ancillaryData,\n\n      // Start with clear flags for other data\n      errorsExist: false,\n      numberOfErrors: 0,\n      protocolRunsExist: false,\n      numberOfProtocolRuns: 0,\n      samplesExist: false,\n      numberOfSamples: 0,\n      imagesExist: false,\n      numberOfImages: 0,\n      pcrsExist: false,\n      numberOfPcrs: 0\n\n    };\n\n    // Now add flags to indicate if there are errors and how many\n    if (doc.errors) {\n      // Count the number of errors\n      var numErrors = 0;\n      for (var property in doc.errors) {\n        if (doc.errors.hasOwnProperty(property)){\n          numErrors++;\n        }\n      }\n      if (numErrors > 0) {\n        deployment['errorsExist'] = true;\n        deployment['numberOfErrors'] = numErrors;\n      }\n    }\n\n    // Now add flags to indicate if there are samples and how many\n    if (doc.samples) {\n      // Count the number of samples\n      var numSamples = 0;\n      for (var property in doc.samples) {\n        if (doc.samples.hasOwnProperty(property)) {\n          numSamples++;\n        }\n      }\n      if (numSamples > 0) {\n        deployment['samplesExist'] = true;\n        deployment['numberOfSamples'] = numSamples;\n      }\n    }\n\n    // Now add flags to indicate if there are protocolRuns and how many\n    if (doc.protocolRuns) {\n      // Count the number of ProtocolRuns\n      var numProtocolRuns = 0;\n      for (var property in doc.protocolRuns) {\n        if (doc.protocolRuns.hasOwnProperty(property)) {\n          numProtocolRuns++;\n        }\n      }\n      if (numProtocolRuns > 0) {\n        deployment['protocolRunsExist'] = true;\n        deployment['numberOfProtocolRuns'] = numProtocolRuns;\n      }\n    }\n\n    // Now add flags to indicate if there are images and how many\n    if (doc.images) {\n      // Count the number of images\n      var numImages = 0;\n      for (var property in doc.images) {\n        if (doc.images.hasOwnProperty(property)) {\n          numImages++;\n        }\n      }\n      if (numImages > 0) {\n        deployment['imagesExist'] = true;\n        deployment['numberOfImages'] = numImages;\n      }\n    }\n\n    // Now add flags to indicate if there are pcrs and how many\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n        deployment['pcrsExist'] = true;\n        deployment['numberOfPcrs'] = numPcrs;\n      }\n    }\n\n    // Now return the condensed deployment with it's ID\n    emit(doc._id,deployment);\n  }\n}"
        },
        "byName": {
            "map": "function(doc) {\n  if (doc.resource === 'Deployment') {\n    // A condensed deployment for performance\n    var deployment = {\n      // Assign the ID\n      _id: doc._id,\n      \n      // Assign the revision\n      _rev: doc._rev,\n\n      // Grab the name of the deployment\n      name: doc.name,\n\n      // Grab the descripton\n      description: doc.description,\n\n      // Grab the dates\n      startDate: doc.startDate,\n      endDate: doc.endDate,\n\n      // Grab the ESP information\n      esp: doc.esp,\n\n      // Grab the location\n      latitude: doc.latitude,\n      longitude: doc.longitude,\n      depth: doc.depth,\n\n      // The last line parsed in the file\n      lastLineParsedFromLogFile: doc.lastLineParsedFromLogFile,\n\n      // Add the list of ancillary data\n      ancillaryData: doc.ancillaryData,\n\n      // Start with clear flags for other data\n      errorsExist: false,\n      numberOfErrors: 0,\n      protocolRunsExist: false,\n      numberOfProtocolRuns: 0,\n      samplesExist: false,\n      numberOfSamples: 0,\n      imagesExist: false,\n      numberOfImages: 0,\n      pcrsExist: false,\n      numberOfPcrs: 0\n\n    };\n    // Now add flags to indicate if there are errors and how many\n    if (doc.errors) {\n      // Count the number of errors\n      var numErrors = 0;\n      for (var property in doc.errors) {\n        if (doc.errors.hasOwnProperty(property)){\n          numErrors++;\n        }\n      }\n      if (numErrors > 0) {\n        deployment['errorsExist'] = true;\n        deployment['numberOfErrors'] = numErrors;\n      }\n    }\n\n    // Now add flags to indicate if there are samples and how many\n    if (doc.samples) {\n      // Count the number of samples\n      var numSamples = 0;\n      for (var property in doc.samples) {\n        if (doc.samples.hasOwnProperty(property)) {\n          numSamples++;\n        }\n      }\n      if (numSamples > 0) {\n        deployment['samplesExist'] = true;\n        deployment['numberOfSamples'] = numSamples;\n      }\n    }\n\n    // Now add flags to indicate if there are protocolRuns and how many\n    if (doc.protocolRuns) {\n      // Count the number of ProtocolRuns\n      var numProtocolRuns = 0;\n      for (var property in doc.protocolRuns) {\n        if (doc.protocolRuns.hasOwnProperty(property)) {\n          numProtocolRuns++;\n        }\n      }\n      if (numProtocolRuns > 0) {\n        deployment['protocolRunsExist'] = true;\n        deployment['numberOfProtocolRuns'] = numProtocolRuns;\n      }\n    }\n\n    // Now add flags to indicate if there are images and how many\n    if (doc.images) {\n      // Count the number of images\n      var numImages = 0;\n      for (var property in doc.images) {\n        if (doc.images.hasOwnProperty(property)) {\n          numImages++;\n        }\n      }\n      if (numImages > 0) {\n        deployment['imagesExist'] = true;\n        deployment['numberOfImages'] = numImages;\n      }\n    }\n\n    // Now add flags to indicate if there are pcrs and how many\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n        deployment['pcrsExist'] = true;\n        deployment['numberOfPcrs'] = numPcrs;\n      }\n    }\n\n    // Now return the condensed deployment with it's ID\n    emit(doc.name,deployment);\n  }\n}"
        },
        "names": {
            "map": "function(doc) {\n  if (doc.resource && doc.resource === 'Deployment') {\n  emit(doc.name,null);\n}\n}",
            "reduce": "function(keys, values) {\n  return true;\n}"
        },
        "all": {
            "map": "function(doc) {\n  if (doc.resource === 'Deployment') {\n    // A condensed deployment for performance\n    var deployment = {\n      // Assign the ID\n      _id: doc._id,\n      \n      // Assign the revision\n      _rev: doc._rev,\n\n      // Grab the name of the deployment\n      name: doc.name,\n\n      // Grab the descripton\n      description: doc.description,\n\n      // Grab the dates\n      startDate: doc.startDate,\n      endDate: doc.endDate,\n\n      // Grab the ESP information\n      esp: doc.esp,\n\n      // Grab the location\n      latitude: doc.latitude,\n      longitude: doc.longitude,\n      depth: doc.depth,\n\n      // The last line parsed in the file\n      lastLineParsedFromLogFile: doc.lastLineParsedFromLogFile,\n\n      // Add the list of ancillary data\n      ancillaryData: doc.ancillaryData,\n\n      // Start with clear flags for other data\n      errorsExist: false,\n      numberOfErrors: 0,\n      protocolRunsExist: false,\n      numberOfProtocolRuns: 0,\n      samplesExist: false,\n      numberOfSamples: 0,\n      imagesExist: false,\n      numberOfImages: 0,\n      pcrsExist: false,\n      numberOfPcrs: 0\n\n    };\n\n    // Now add flags to indicate if there are errors and how many\n    if (doc.errors) {\n      // Count the number of errors\n      var numErrors = 0;\n      for (var property in doc.errors) {\n        if (doc.errors.hasOwnProperty(property)){\n          numErrors++;\n        }\n      }\n      if (numErrors > 0) {\n        deployment['errorsExist'] = true;\n        deployment['numberOfErrors'] = numErrors;\n      }\n    }\n\n    // Now add flags to indicate if there are samples and how many\n    if (doc.samples) {\n      // Count the number of samples\n      var numSamples = 0;\n      for (var property in doc.samples) {\n        if (doc.samples.hasOwnProperty(property)) {\n          numSamples++;\n        }\n      }\n      if (numSamples > 0) {\n        deployment['samplesExist'] = true;\n        deployment['numberOfSamples'] = numSamples;\n      }\n    }\n\n    // Now add flags to indicate if there are protocolRuns and how many\n    if (doc.protocolRuns) {\n      // Count the number of ProtocolRuns\n      var numProtocolRuns = 0;\n      for (var property in doc.protocolRuns) {\n        if (doc.protocolRuns.hasOwnProperty(property)) {\n          numProtocolRuns++;\n        }\n      }\n      if (numProtocolRuns > 0) {\n        deployment['protocolRunsExist'] = true;\n        deployment['numberOfProtocolRuns'] = numProtocolRuns;\n      }\n    }\n\n    // Now add flags to indicate if there are images and how many\n    if (doc.images) {\n      // Count the number of images\n      var numImages = 0;\n      for (var property in doc.images) {\n        if (doc.images.hasOwnProperty(property)) {\n          numImages++;\n        }\n      }\n      if (numImages > 0) {\n        deployment['imagesExist'] = true;\n        deployment['numberOfImages'] = numImages;\n      }\n    }\n\n    // Now add flags to indicate if there are pcrs and how many\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n        deployment['pcrsExist'] = true;\n        deployment['numberOfPcrs'] = numPcrs;\n      }\n    }\n\n    // Now return the condensed deployment with it's ID\n    emit(doc._id,deployment);\n  }\n}"
        },
        "errors": {
            "map": "function(doc) {\n  // Make sure document is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Create an object to hold the sorted errors\n    var sortedErrors = {};\n\n    // Create an array that can be used to sort\n    var timestamps = [];\n\n    // Check for errors first\n    if (doc.errors) {\n\n      // Now add the timestamps to the array for sorting\n      for (ts in doc.errors) {\n        timestamps.push(ts);\n      }\n\n      // Now sort\n      timestamps.sort();\n    }\n\n    // Now build a new object with sorted timestamps\n    for (var i = 0; i < timestamps.length; i++) {\n      sortedErrors[timestamps[i]] = doc.errors[timestamps[i]];\n    }\n\n    // Emit sorted errors\n    emit(doc._id,sortedErrors);\n  }\n}"
        },
        "protocolRuns": {
            "map": "function(doc) {\n  // Make sure the document is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Create an object to hold sorted errors\n    var sortedProtocolRuns = {};\n\n    // Create an array of timestamps that can be used to sort\n    var timestamps = [];\n\n    // Check for protocolRuns first\n    if (doc.protocolRuns) {\n\n      // Add all the timestamps\n      for (ts in doc.protocolRuns) {\n        timestamps.push(ts);\n      }\n\n      // Now sort\n      timestamps.sort();\n    }\n\n    // Now build a new object with sorted timestamps\n    for (var i = 0; i < timestamps.length; i++) {\n      sortedProtocolRuns[timestamps[i]] = doc.protocolRuns[timestamps[i]];\n    }\n\n    // Emit the sorted protocol runs\n    emit(doc._id,sortedProtocolRuns);\n  }\n}"
        },
        "samples": {
            "map": "function(doc) {\n  // Make sure the document is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Create an object to hold sorted samples\n    var sortedSamples = {};\n\n    // Create an array of timestamps that can be used to sort\n    var timestamps = [];\n\n    // Check for samples\n    if (doc.samples) {\n\n      // Add all the timestamps\n      for (ts in doc.samples) {\n        timestamps.push(ts);\n      }\n\n      // Now sort\n      timestamps.sort();\n    }\n\n    // Now build a new object with the sorted timestamps\n    for (var i = 0; i < timestamps.length; i++) {\n      sortedSamples[timestamps[i]] = doc.samples[timestamps[i]];\n    }\n\n    // Emit the sorted samples\n    emit(doc._id,sortedSamples);\n  }\n}"
        },
        "images": {
            "map": "function(doc) {\n  // Make sure the document is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Create an object to hold sorted images\n    var sortedImages = {};\n\n    // Create an array that can be used to sort\n    var timestamps = [];\n\n    // Check for images first\n    if (doc.images) {\n\n      // Add the timestamps to the array for sorting\n      for (ts in doc.images) {\n        timestamps.push(ts);\n      }\n\n      // Now sort\n      timestamps.sort();\n    }\n\n    // Now build a new object with sorted timestamps\n    for (var i = 0; i < timestamps.length; i++) {\n      sortedImages[timestamps[i]] = doc.images[timestamps[i]];\n    }\n\n    // Now emit the sorted images\n    emit(doc._id,sortedImages);\n  }\n}"
        },
        "pcrTypes": {
            "map": "function(doc) {\n  // Make sure it is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Now makes sure it has some PCR data\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n\n        // Build a new array that will contains the pcr type names\n        var pcrTypesToReturn = [];\n\n        // Loop over the pcr types\n        for (var pcrType in doc.pcrs) {\n          // Add it to the array\n          pcrTypesToReturn.push(pcrType);\n        }\n    \n        // Now emit the deployment ID and pcr data\n        emit(doc._id,pcrTypesToReturn);\n      }\n    }\n  }\n}"
        },
        "pcrRunNames": {
            "map": "function(doc) {\n  // Make sure it is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Now makes sure it has some PCR data\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n        // Loop over the pcr data\n        for (var pcrType in doc.pcrs) {\n\n          // Build a new array that will contains the run names\n          var runNames = [];\n\n          // Now loop over the run names\n          for (var runName in doc.pcrs[pcrType]) {\n            runNames.push(runName);\n          }\n\n          // emit the result\n          emit([doc._id,pcrType],runNames);\n        }\n      }    \n    }\n  }\n}"
        },
        "pcrEpochSeconds": {
            "map": "function(doc) {\n  // Make sure it is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Now makes sure it has some PCR data\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n        // Loop over the pcr data\n        for (var pcrType in doc.pcrs) {\n\n          // Now loop over the column names\n          for (var columnName in doc.pcrs[pcrType]) {\n\n            // The array of epoch seconds\n            var epochSecs = [];\n\n            // Now loop over the timestamps\n            for (var epochSec in doc.pcrs[pcrType][columnName]) {\n              epochSecs.push(epochSec);\n            }\n            // emit the result\n            emit([doc._id,pcrType,columnName],epochSecs);\n          }\n        }\n      }\n    }\n  }\n}"
        },
        "pcrColumnNames": {
            "map": "function(doc) {\n  // Make sure it is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Now makes sure it has some PCR data\n    if (doc.pcrs) { \n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n        // Loop over the pcr data\n        for (var pcrType in doc.pcrs) {\n\n          // The column names\n          var columnNames = [];\n       \n          // Now loop over the column names\n          for (var columnName in doc.pcrs[pcrType]) {\n\n            // Add the name of the column\n            columnNames.push(columnName)\n          }\n          // emit the result\n          emit([doc._id,pcrType],columnNames);\n        }\n      }\n    }\n  }\n}"
        },
        "pcrDataRecords": {
            "map": "function(doc) {\n  // Make sure it is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Now makes sure it has some PCR data\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n        // Loop over the pcr data\n        for (var pcrType in doc.pcrs) {\n\n          // Now loop over the column names\n          for (var columnName in doc.pcrs[pcrType]) {\n\n            // Now loop over the timestamps\n            for (var epochSec in doc.pcrs[pcrType][columnName]) {\n\n              // The array of data points\n              var dataRecords = [];\n\n              // Loop over the data records\n              for (var i = 0; i < doc.pcrs[pcrType][columnName][epochSec].length; i++) {\n                dataRecords.push(doc.pcrs[pcrType][columnName][epochSec][i]);\n              }\n              // emit the result\n              emit([doc._id,pcrType,columnName,epochSec],dataRecords);\n            }\n          }\n        }\n      }\n    }\n  }\n}"
        },
        "pcrTypesFullTree": {
            "map": "function(doc) {\n  // Make sure it is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Create a new document object to return\n    var fullPCRTreeWithoutData = {};\n\n    // Now makes sure it has some PCR data\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n        // Loop over the pcr data\n        for (var pcrType in doc.pcrs) {\n          // Add PCR Type\n          fullPCRTreeWithoutData[pcrType] = {};\n\n          // Now loop over the column names\n          for (var columnName in doc.pcrs[pcrType]) {\n            // Add column name\n            fullPCRTreeWithoutData[pcrType][columnName] = {};\n\n            // Now loop over the timestamps\n            for (var epochSec in doc.pcrs[pcrType][columnName]) {\n\n              // Add epoch seconds\n              fullPCRTreeWithoutData[pcrType][columnName][epochSec] = {};\n            }\n          }\n        }\n      }\n    }\n    // Return the new PCR Tree\n    emit(doc._id,fullPCRTreeWithoutData);\n  }\n}"
        },
        "pcrsByTime": {
            "map": "function(doc) {\n  // Make sure it is a deployment first\n  if (doc.resource === 'Deployment') {\n\n    // Now makes sure it has some PCR data\n    if (doc.pcrs) {\n      // Count the number of PCRs\n      var numPcrs = 0;\n      for (var property in doc.pcrs) {\n        if (doc.pcrs.hasOwnProperty(property)) {\n          numPcrs++;\n        }\n      }\n      if (numPcrs > 0) {\n\n        // Create an object to hold timestamps and their\n        // associated pcrTypes and pcrRunNames\n        var pcrsByTime = {};\n\n        // Loop over the pcr types\n        for (var pcrType in doc.pcrs) {\n          // Now loop over the prc columnNames\n          for (var columnName in doc.pcrs[pcrType]) {\n            // Now loop over the timestamps\n            for (var timestamp in doc.pcrs[pcrType][columnName]) {\n              // See if the timestamp is already there\n              if (!pcrsByTime[timestamp]) {\n                pcrsByTime[timestamp] = {};\n              }\n\n              // Now check to see if the PCRType has been added\n              if (!pcrsByTime[timestamp][pcrType]) {\n                pcrsByTime[timestamp][pcrType] = [];\n              }\n\n              // Add the column name to the object\n              pcrsByTime[timestamp][pcrType].push(columnName);\n            }\n          }\n        }\n\n        // Now I need to sort them by time, so create an object\n        // that will hold the sorted set\n        var sortedPcrsByTime = {};\n\n        // An array of timestamp that can be sorted\n        var timestampsToSort = [];\n\n        // Loop over the timestamps\n        for (var timestampToAdd in pcrsByTime) {\n          // Add the timestamp\n          timestampsToSort.push(timestampToAdd);\n        }\n\n        // Now sort them\n        timestampsToSort.sort();\n\n        // Now loop over the sorted array and build the sorted\n        // list of PCR runs\n        for (var i = 0; i < timestampsToSort.length; i++) {\n          sortedPcrsByTime[timestampsToSort[i]] = pcrsByTime[timestampsToSort[i]];\n        }\n    \n        // Now emit the deployment ID and pcr data\n        emit(doc._id,sortedPcrsByTime);\n      }\n    }\n  }\n}"
        },
        "byNameAndESPName": {
            "map": "function(doc) {\n  if (doc['resource'] == 'Deployment') {\n    emit([doc.name, doc.esp.name], doc);\n  }\n}"
        }
    }
}